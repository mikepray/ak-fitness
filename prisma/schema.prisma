// schema.prisma

generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["jsonProtocol"]
}

datasource db {
  provider          = "postgresql"
  url               = env("POSTGRES_PRISMA_URL") // uses connection pooling
  directUrl         = env("POSTGRES_URL_NON_POOLING") // uses a direct connection
}

model WorkspaceConfig {
  id               Int     @id @default(0) // must be zero TODO add a check constraint via sql
  canUsersRegister Boolean @default(true)
  name             String
  description      String?
}

model User {
  id            String    @id @default(cuid())
  isGlobalAdmin Boolean   @default(false)
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  isUserEnabled Boolean   @default(true)
  posts        Post[]
  accounts     Account[]
  sessions     Session[]
  workoutUsers WorkoutUser[]
}

model WorkoutUser {
  id        String  @id @default(cuid())
  workoutId String
  workout   Workout @relation(fields: [workoutId], references: [id], onDelete: Cascade)
  userId    String
  user      User    @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Workout {
  id               String            @id @default(cuid())
  name             String
  description      String?
  tags             String?
  workoutExercises WorkoutExercise[] 
  workoutUsers     WorkoutUser[]
}

model Exercise {
  id                String            @id @default(cuid())
  name              String
  description       String?
  tags              String?
  type              String?
  equipmentRequired String?
  workoutExercises  WorkoutExercise[]
}

model WorkoutExercise {
  id          String   @id @default(cuid())
  workout     Workout  @relation(fields: [workoutId], references: [id])
  workoutId   String
  exercise    Exercise @relation(fields: [exerciseId], references: [id])
  exerciseId  String
  sets        String?
  reps        String?
  restSeconds String?
}

model Post {
  id        String  @id @default(cuid())
  title     String
  content   String?
  published Boolean @default(false)
  author    User?   @relation(fields: [authorId], references: [id])
  authorId  String?
}

// Tables for NextAuth authn
model Account {
  id                 String  @id @default(cuid())
  userId             String  @map("user_id")
  type               String
  provider           String
  providerAccountId  String  @map("provider_account_id")
  refresh_token      String?
  access_token       String?
  expires_at         Int?
  token_type         String?
  scope              String?
  id_token           String?
  session_state      String?
  oauth_token_secret String?
  oauth_token        String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique @map("session_token")
  userId       String   @map("user_id")
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  id         Int      @id @default(autoincrement())
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}
